# -*- coding: utf-8 -*-
"""labtasks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TpCKBm0bK1E85TrIFIV0CyPqGRvGqwTy

lab 2
"""

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y != 0:
        return x / y
    else:
        return "Error! Division by zero."

def calculator():


    operations = {
        '1': ('Add', add),
        '2': ('Subtract', subtract),
        '3': ('Multiply', multiply),
        '4': ('Divide', divide)
    }

    while True:
        print("\nSelect operation:")
        for key, (name, _) in operations.items():
            print(f"{key}. {name}")

        choice = input("Enter choice (1/2/3/4): ")

        if choice in operations:
            num1 = float(input("Enter first number: "))
            num2 = float(input("Enter second number: "))
            operation_name, operation_func = operations[choice]
            result = operation_func(num1, num2)
            print(f"{num1} {operation_name} {num2} = {result}")
        else:
            print("Invalid input! Please enter a number between 1 and 4.")

        next_calculation = input("Do you want to perform another calculation? (yes/no): ")
        if next_calculation.lower() != 'yes':
            print("Thank you for using the calculator!")
            break

if __name__ == "__main__":
    calculator()

"""lab 3"""

class CourseRegistration:
    def __init__(self):
        self.courses = []

    def add_course(self, course_name):
        """Add a course to the registration list if it doesn't already exist."""
        if course_name not in self.courses:
            self.courses.append(course_name)
            print(f"{course_name} has been added.")
        else:
            print(f"{course_name} is already in the list.")

    def drop_course(self, course_name):
        """Remove a course from the registration list if it exists."""
        if course_name in self.courses:
            self.courses.remove(course_name)
            print(f"{course_name} has been dropped.")
        else:
            print(f"{course_name} is not in the list.")

    def view_courses(self):
        """Display all registered courses."""
        if not self.courses:
            print("No courses registered.")
        else:
            print("Registered Courses:")
            for course in self.courses:
                print(course)

    def sort_courses(self):
        """Sort the courses alphabetically."""
        self.courses.sort()
        print("Courses sorted alphabetically.")

def main():
    registration = CourseRegistration()

    while True:
        print("\nCourse Registration System")
        print("1. Add Course")
        print("2. Drop Course")
        print("3. View Courses")
        print("4. Sort Courses")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            course_name = input("Enter the course name to add: ")
            registration.add_course(course_name)
        elif choice == '2':
            course_name = input("Enter the course name to drop: ")
            registration.drop_course(course_name)
        elif choice == '3':
            registration.view_courses()
        elif choice == '4':
            registration.sort_courses()
            registration.view_courses()
        elif choice == '5':
            print("Exiting the system.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

"""lab 4"""

import numpy as np

# Create a 3D array (2x3x4)
array_3d = np.random.randint(0, 10, (2, 3, 4))

print("3D Array:")
print(array_3d)

# Iterate through the 3D array
for i in range(array_3d.shape[0]):  # Iterate over the first dimension
    for j in range(array_3d.shape[1]):  # Iterate over the second dimension
        for k in range(array_3d.shape[2]):  # Iterate over the third dimension
            print(f"Element at ({i}, {j}, {k}): {array_3d[i, j, k]}")

"""lab 4-1"""

import numpy as np


array_1d = np.array([1, 2, 3, 4, 5])


array_reshaped = array_1d.reshape((5, 1))
print("\nReshaped Array (5x1):")
print(array_reshaped)


mean_value = np.mean(array_1d)
print("\nMean of array_1d:", mean_value)

sum_value = np.sum(array_1d)
print("Sum of array_1d:", sum_value)


max_value = np.max(array_1d)
print("Maximum value in array_1d:", max_value)

"""lab 5"""

import numpy as np


original_array = np.array([1, 23, 3, 4, 5, 6, 5, 8, 9, 30, 11, 22, 13, 21, 15])


arrays = np.array_split(original_array, 3)


sums = [np.sum(arr) for arr in arrays]

print("Arrays after splitting:")
for i, arr in enumerate(arrays):
    print(f"Array {i + 1}: {arr}, Sum: {sums[i]}")

"""lab 5-1"""

# Create a NumPy array
num_array = np.array([1, 23, 3, 4, 5, 6, 5, 8, 9, 30, 11, 22, 13, 21, 15])

# Extract numbers greater than 5 and less than 15
filtered_numbers = num_array[(num_array > 5) & (num_array < 15)]

print("\nNumbers greater than 5 and less than 15:")
print(filtered_numbers)

"""lab 5-2"""

set1 = {0, 2, 4, 6, 8, 10}


set2 = set(range(1, 11))


set2_list = list(set2)
if len(set2_list) >= 5:
    del set2_list[1]  # Remove second element (index 1)
    del set2_list[3]  # Remove fifth element (index 4)
set2 = set(set2_list)

print("\nSet 1:", set1)
print("Set 2 after removals:", set2)


set3 = set1.intersection(set2)

print("Set 3 (Intersection of Set 1 and Set 2):", set3)

"""lab 5-3"""

students = {
    "001": {"sapId": "001", "name": "Alice", "age": 20, "Semester": "Six"},
    "002": {"sapId": "002", "name": "Bob", "age": 21, "Semester": "Six"},
    "003": {"sapId": "003", "name": "Charlie", "age": 22, "Semester": "Six"},
    "004": {"sapId": "004", "name": "David", "age": 23, "Semester": "Six"},
    "005": {"sapId": "005", "name": "Eve", "age": 24, "Semester": "Six"},
}


for student in students.values():
    student["Semester"] = "Seven"

print("\nUpdated Students Dictionary:")
for sapId, info in students.items():
    print(f"SAP ID: {sapId}, Record: {info}")